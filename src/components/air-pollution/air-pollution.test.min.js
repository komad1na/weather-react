// @ts-nocheck
const React=require("react"),{render:render,screen:screen}=require("@testing-library/react"),{Provider:Provider}=require("react-redux"),{configureStore:configureStore}=require("@reduxjs/toolkit");jest.mock("./air-pollution-style.css",(()=>({}))),jest.mock("../utils/getColor",(()=>({no2:jest.fn(),pm10:jest.fn(),o3:jest.fn(),pm25:jest.fn()}))),jest.mock("../utils/tableData",(()=>function({color:e,text:t}){return require("react").createElement("td",{"data-testid":"table-data",style:{backgroundColor:e}},t)})),jest.mock("react-redux/es/hooks/useSelector",(()=>({useSelector:jest.fn()})));const AirPollution=require("./air-pollution.jsx").default,{useSelector:useSelector}=require("react-redux/es/hooks/useSelector"),{no2:no2,pm10:pm10,o3:o3,pm25:pm25}=require("../utils/getColor"),createMockStore=e=>configureStore({reducer:{data:(t={airPollution:e},r)=>t}});describe("AirPollution Component",(()=>{beforeEach((()=>{jest.clearAllMocks(),no2.mockReturnValue({color:"#79bc6a",text:"Very low"}),pm10.mockReturnValue({color:"#bbcf4c",text:"Low"}),o3.mockReturnValue({color:"#eec20b",text:"Medium"}),pm25.mockReturnValue({color:"#f29305",text:"High"})}));const e={no2:30,pm10:35,o3:100,pm2_5:25};it("renders air pollution title",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution)),expect(screen.getByText("Air Pollution")).toBeInTheDocument()})),it("renders all pollutant headers",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution)),expect(screen.getByText("NO2")).toBeInTheDocument(),expect(screen.getByText("PM10")).toBeInTheDocument(),expect(screen.getByText("O3")).toBeInTheDocument(),expect(screen.getByText("PM2.5")).toBeInTheDocument()})),it("renders units for all pollutants",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution));const t=screen.getAllByText("Î¼g/m3");expect(t).toHaveLength(4)})),it("calls color functions with correct data values",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution)),expect(no2).toHaveBeenCalledWith(30),expect(pm10).toHaveBeenCalledWith(35),expect(o3).toHaveBeenCalledWith(100),expect(pm25).toHaveBeenCalledWith(25)})),it("renders TableData components with correct props for values",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution));const t=screen.getAllByTestId("table-data");expect(t).toHaveLength(8)})),it("renders air quality link",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution));const t=screen.getByRole("link",{name:/read more about air quality index/i});expect(t).toBeInTheDocument(),expect(t).toHaveAttribute("href","https://en.wikipedia.org/wiki/Air_quality_index#CAQI")})),it("handles missing air pollution data gracefully",(()=>{useSelector.mockReturnValue({}),no2.mockReturnValue({color:"",text:"---"}),pm10.mockReturnValue({color:"",text:"---"}),o3.mockReturnValue({color:"",text:"---"}),pm25.mockReturnValue({color:"",text:"---"}),render(React.createElement(AirPollution)),expect(no2).toHaveBeenCalledWith(void 0),expect(pm10).toHaveBeenCalledWith(void 0),expect(o3).toHaveBeenCalledWith(void 0),expect(pm25).toHaveBeenCalledWith(void 0)})),it("renders correct CSS class for main container",(()=>{useSelector.mockReturnValue(e);const{container:t}=render(React.createElement(AirPollution)),r=t.querySelector(".air-card");expect(r).toBeInTheDocument()})),it("renders correct CSS class for title",(()=>{useSelector.mockReturnValue(e);const{container:t}=render(React.createElement(AirPollution)),r=t.querySelector(".title");expect(r).toBeInTheDocument(),expect(r).toHaveTextContent("Air Pollution")})),it("renders correct CSS class for link",(()=>{useSelector.mockReturnValue(e);const{container:t}=render(React.createElement(AirPollution)),r=t.querySelector(".link");expect(r).toBeInTheDocument()})),it("renders table with correct structure",(()=>{useSelector.mockReturnValue(e),render(React.createElement(AirPollution));const t=screen.getByRole("table");expect(t).toBeInTheDocument();const r=t.querySelector("tbody");expect(r).toBeInTheDocument();const o=r.querySelectorAll("tr");expect(o).toHaveLength(4)})),it("renders link cell with correct colspan",(()=>{useSelector.mockReturnValue(e);const{container:t}=render(React.createElement(AirPollution)),r=t.querySelector('td[colspan="4"]');expect(r).toBeInTheDocument()}))}));